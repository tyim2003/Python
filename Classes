/* class definition */
class Animal(object):
  """Makes cute animals."""
  is_alive = True
  def __init__(self, name, age):
    self.name = name
    self.age = age

/* the different animals */

zebra = Animal("Jeffrey", 2)
giraffe = Animal("Bruce", 1)
panda = Animal("Chad", 7)

/* print out the following */
print zebra.name, zebra.age, zebra.is_hungry
print giraffe.name, giraffe.age, giraffe.is_hungry
print panda.name, panda.age, panda.is_hungry



/* Create an instance of ShoppingCart called my_cart.
Initialize it with values, then add an item to your cart.*/

class ShoppingCart(object):
  """Creates shopping cart objects
  for users of our fine website."""
  items_in_cart = {}
  def __init__(self, customer_name):
    self.customer_name = customer_name

  def add_item(self, product, price):
    """Add product to the cart."""
    if not product in self.items_in_cart:
      self.items_in_cart[product] = price
      print product + " added."
    else:
      print product + " is already in the cart."

  def remove_item(self, product):
    """Remove product from the cart."""
    if product in self.items_in_cart:
      del self.items_in_cart[product]
      print product + " removed."
    else:
      print product + " is not in the cart."

/* Create a class, Triangle. Its __init__() method takes self, angle1, angle2, and angle3 as arguments */

class Triangle(object):
  def __init__(self, angle1, angle2, angle3):
    self.angle1 = angle1
    self.angle2 = angle2
    self.angle3 = angle3
  number_of_sides = 3
  def check_angles(self):
    if (self.angle1 + self.angle2 + self.angle3 == 180):
      return True
    else:
      return False
 
my_triangle = Triangle(90,30,60)

print my_triangle.number_of_sides
print my_triangle.check_angles()

class Equilateral(Triangle):
  angle = 60
  def __init__(self):
    self.angle1 = self.angle
    self.angle2 = self.angle
    self.angle3 = self.angle




/* Define a new class named "Car" */
class Car(object):
  condition = "new"
  def __init__(self, model, color, mpg):
    self.model = model
    self.color = color
    self.mpg   = mpg
   
  def display_car(self):
    print "This is a %s %s with %s MPG." % (self.color, self.model, str(self.mpg))
    
  def drive_car(self):
    self.condition = "used"

/* Create a class ElectricCar that inherits from Car */
class ElectricCar(Car):
  def __init__(self, model, color, mpg, battery_type):
    self.model = model
    self.color = color
    self.mpg   = mpg
    self.battery_type = battery_type
  
  /* add a new method drive_car that changes the car's condition to the string "like new" */
  def drive_car(self):
    self.condition = "like new"

/* create an electric car named my_car with a "molten salt" battery_type */
my_car = ElectricCar("DeLorean", "silver", 88, "molten salt")

print my_car.condition
/*  drive my_car by calling the drive_car function */
my_car.drive_car()
print my_car.condition





/*Define a Point3D class that inherits from object.
Inside the Point3D class, define an __init__() function that accepts self, x, y, and z.
Define a __repr__() method that returns "(%d, %d, %d)" % (self.x, self.y, self.z)*/

Finally, print my_point.
class Point3D(object):
  def __init__(self, x, y, z):
    self.x=x
    self.y=y
    self.z=z
  def __repre__(self, ):
    return "(%d, %d, %d)" % (self.x, self.y, self.z)

/* create a new variable named my_point containing a new instance of Point3D with x=1, y=2, and z=3.*/
my_point = Point3D(1, 2, 3)

print my_point
